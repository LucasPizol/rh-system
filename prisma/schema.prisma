// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id   String @id @default(cuid())
  name String

  employees   Employee[]
  users       User[]
  departments Department[]
  contracts   Contract[]
  product     Product[]
  order       Order[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  customer  Customer[]

  @@map("company")
}

model User {
  id       String @id @default(cuid())
  username String @unique
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  order     Order[]

  @@map("user")
}

model Employee {
  id      String @id @default(cuid())
  name    String
  email   String
  phone   String
  address String

  document         String
  documentPhotoUrl String

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  contract  Contract[]

  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String
  company      Company    @relation(fields: [companyId], references: [id])
  companyId    String

  isDisabled Boolean   @default(false)
  disabledAt DateTime?

  isFired     Boolean   @default(false)
  firedAt     DateTime?
  firedReason String?

  @@map("employee")
}

model Department {
  id   String @id @default(cuid())
  name String

  employees Employee[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String

  @@map("department")
}

model Contract {
  id         String @id @default(cuid())
  employeeId String

  startDate        DateTime
  endDate          DateTime?
  interrupmentDate DateTime?
  role             String

  contractUrl String

  type String @default("cpf")

  sallary Float
  hours   Float

  hoursType   String  @default("monthly")
  description String?

  employee Employee @relation(fields: [employeeId], references: [id])
  url      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String

  @@map("contract")
}

model Product {
  id   String @id @default(cuid())
  name String

  description String?

  barcode String? @unique

  minQuantity Float @default(0)
  quantity    Float

  boughtPrice Float @default(0)
  sellPrice   Float @default(0)

  weight Float @default(0)

  batchNumber String?

  unit String

  category String

  isOwner Boolean @default(false)

  location       String?
  validationDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  isDisabled   Boolean        @default(false)
  disabledAt   DateTime?
  order        Order[]
  productOrder ProductOrder[]

  @@map("product")
}

model ProductOrder {
  id String @id @default(cuid())

  productId String
  product   Product @relation(fields: [productId], references: [id])

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  quantity Float
  value    Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_order")
}

model Customer {
  id   String @id @default(cuid())
  name String
  cnpj String
  cpf  String

  addressId String

  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  email String
  phone String

  code        Int     @unique @default(autoincrement())
  description String?
  contractUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order[]

  @@map("customer")
}

model Order {
  id String @id @default(cuid())

  productId String
  product   Product @relation(fields: [productId], references: [id])

  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  quantity Float
  value    Float

  type Int

  isInvoice     Boolean   @default(false)
  invoicedAt    DateTime?
  invoiceNumber String?
  invoiceUrl    String?

  paymentMethodId String
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  installments Installments[]
  productOrder ProductOrder[]

  @@map("order")
}

model PaymentMethod {
  id             String @id @default(cuid())
  name           String
  expirationDays Int[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order[]

  @@map("payment_method")
}

model Installments {
  id String @id @default(cuid())

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  expiresIn DateTime

  isPaid Boolean   @default(false)
  paidAt DateTime?

  value Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("installments")
}
